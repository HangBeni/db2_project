CREATE TABLE ORS (
    ORS_ID NUMBER PRIMARY KEY,
    ORS_NAME VARCHAR(100) NOT NULL,
    PATROL_ID NUMBER NOT NULL,
    CONSTRAINT ORS_PATROL_FK FOREIGN KEY (PATROL_ID) REFERENCES PATROL(PATROL_ID),
    CONSTRAINT ORS_NAME_U UNIQUE (ORS_NAME)
);

CREATE TABLE PATROL (
    PATROL_ID NUMBER PRIMARY KEY,
    PATROL_NAME VARCHAR2(100) NOT NULL
);

CREATE OR REPLACE FUNCTION GET_RANDOM_ORS_FUNC RETURN ORS.ORS_ID%TYPE IS
    V_RESULT ORS.ORS_ID%TYPE;
BEGIN
    SELECT ORS_ID INTO V_RESULT
    FROM ORS
    WHERE ROWNUM = 1
    ORDER BY DBMS_RANDOM.VALUE;
    RETURN V_RESULT;
END GET_RANDOM_ORS_FUNC;
/

CREATE OR REPLACE FUNCTION GET_ORS_BY_ID_FUNC(
    P_ORS_ID ORS.ORS_ID%TYPE
) RETURN ORS%ROWTYPE IS
    V_RESULT ORS%ROWTYPE;
BEGIN
    SELECT * INTO V_RESULT
    FROM ORS
    WHERE ORS_ID = P_ORS_ID;
    CASE NVL(V_RESULT.ORS_ID, 0)
        WHEN 0 THEN
            RAISE EXCEPTIONS_PKG.NOT_FOUND_ORS_EXC;
        ELSE
            RETURN V_RESULT;
    END CASE;
EXCEPTION
    WHEN EXCEPTIONS_PKG.NOT_FOUND_ORS_EXC THEN
        DBMS_OUTPUT.PUT_LINE('Ors ID does not found - ' || SQLCODE || ' -ERROR- ' || SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error was encountered - ' || SQLCODE || ' -ERROR- ' || SQLERRM);
END GET_ORS_BY_ID_FUNC;