DECLARE
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT
    FROM DBA_USERS T
    WHERE T.USERNAME='CSERKESZ_ADMIN';
    SELECT COUNT(*) INTO V_COUNT
    FROM DBA_USERS T
    WHERE T.USERNAME='CSERKESZ_ADMIN';
    IF V_COUNT = 1 THEN
        EXECUTE IMMEDIATE 'DROP USER CSERKESZ_ADMIN CASCADE';
    END IF;
END;
/

CREATE USER CSERKESZ_ADMIN IDENTIFIED BY 12345678 DEFAULT TABLESPACE USERS QUOTA UNLIMITED ON USERS;

/

GRANT CREATE TRIGGER TO CSERKESZ_ADMIN;

GRANT CREATE SESSION TO CSERKESZ_ADMIN;

GRANT CREATE TABLE TO CSERKESZ_ADMIN;

GRANT CREATE VIEW TO CSERKESZ_ADMIN;

GRANT CREATE SEQUENCE TO CSERKESZ_ADMIN;

GRANT CREATE PROCEDURE TO CSERKESZ_ADMIN;

GRANT CREATE TYPE TO CSERKESZ_ADMIN;

GRANT CREATE ANY DIRECTORY TO CSERKESZ_ADMIN;

ALTER SESSION SET CURRENT_SCHEMA=CSERKESZ_ADMIN;

/

CREATE TABLE MEMBERS (
    MEMBER_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(40) NOT NULL,
    LAST_NAME VARCHAR2(80) NOT NULL,
    MOTHERS_NAME VARCHAR2(120) NOT NULL,
    MOTHERS_TELEPHONE_NUMBER VARCHAR2(12) NOT NULL,
    MOTHERS_EMAIL VARCHAR2(60) NOT NULL,
    MEMBER_EMAIL VARCHAR2(60),
    MEMBER_TELEPHONE_NUMBER VARCHAR2(12),
    ADDRESS_ID NUMBER,
    BIRTH_DATE DATE,
    ORS_ID NUMBER,
    PATROL_ID NUMBER,
    CONSTRAINT MEMBERS_EMAIL_U UNIQUE (MEMBER_EMAIL),
    CONSTRAINT MEMBERS_TELEPHONE_NUMBER_U UNIQUE (MEMBER_TELEPHONE_NUMBER),
    CONSTRAINT MEMBERS_ORS_FK FOREIGN KEY (ORS_ID) REFERENCES ORS(ORS_ID),
    CONSTRAINT MEMBERS_PATROL_FK FOREIGN KEY (PATROL_ID) REFERENCES PATROL(PATROL_ID),
    CONSTRAINT MEMBERS_ADDRESS_FK FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
) TABLESPACE USERS;

/

CREATE TABLE MEMBER_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/

CREATE TABLE ADDRESS (
    ADDRESS_ID NUMBER PRIMARY KEY,
    MEMBER_ID NUMBER NOT NULL,
    ZIP_CODE VARCHAR2(10) NOT NULL,
    COUNTRY VARCHAR2(50) NOT NULL,
    CITY VARCHAR2(50) NOT NULL,
    STREET_NAME VARCHAR2(100) NOT NULL,
    STREET_TYPE VARCHAR2(40) NOT NULL,
    HOUSE_NUMBER VARCHAR2(30) NOT NULL,
    CONSTRAINT MEMBER_ADDRESS_FK FOREIGN KEY (MEMBER_ID) REFERENCES MEMBERS(MEMBER_ID),
    CONSTRAINT MEMBER_ADDRESS_U UNIQUE (ADDRESS_ID, MEMBER_ID)
);

/

CREATE TABLE ADDRESS_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/

CREATE TABLE ORS (
    ORS_ID NUMBER PRIMARY KEY,
    ORS_NAME VARCHAR(100) NOT NULL,
    PATROL_ID NUMBER NOT NULL,
    CONSTRAINT ORS_PATROL_FK FOREIGN KEY (PATROL_ID) REFERENCES PATROL(PATROL_ID),
    CONSTRAINT ORS_NAME_U UNIQUE (ORS_NAME)
);

/

CREATE TABLE PATROL (
    PATROL_ID NUMBER PRIMARY KEY,
    PATROL_NAME VARCHAR2(100) NOT NULL
);

/

CREATE TABLE RANK_PRIVILEGES (
    STATUS_ID NUMBER PRIMARY KEY,
    MEMBER_ID NUMBER NOT NULL,
    RANK_ID NUMBER NOT NULL,
    PROMOTION_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT MEMBER_RANK_FK FOREIGN KEY (MEMBER_ID) REFERENCES MEMBERS(MEMBER_ID),
    CONSTRAINT RANK_DICTIONARY_FK FOREIGN KEY (RANK_ID) REFERENCES RANK_DICTIONARY(RANK_ID),
    CONSTRAINT MEMBER_RANK_U UNIQUE (MEMBER_ID, RANK_ID),
    CONSTRAINT PROMOTION_TIME_CK CHECK ( PROMOTION_TIME + INTERVAL '1' YEAR >= CURRENT_TIMESTAMP )
);

/

CREATE TABLE RANK_DICTIONARY (
    RANK_ID NUMBER PRIMARY KEY,
    RANK_NAME VARCHAR(50) NOT NULL
);

/

CREATE TABLE RANK_PRIVILEGES_HIS (
    CHANGE_ID NUMBER PRIMARY KEY,
    CHANGER VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/

CREATE TABLE GATHERING_REPORTS(
    REPORT_ID NUMBER PRIMARY KEY,
    REPORT_CONTENT CLOB NOT NULL,
    AUTHOR_ID NUMBER NOT NULL,
    ORS_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT GATHERING_AUTHOR_FK FOREIGN KEY (AUTHOR_ID) REFERENCES MEMBERS(MEMBER_ID),
    CONSTRAINT GATHERING_ORS_FK FOREIGN KEY (ORS_ID) REFERENCES ORS(ORS_ID)
);

/

CREATE TABLE GATHERING_HIS (
    LOG_ID NUMBER PRIMARY KEY,
    CHANGER VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/

CREATE TABLE MEETING (
    MEETING_ID NUMBER PRIMARY KEY,
    MEETING_CONTENT CLOB NOT NULL,
    AUTHOR_ID NUMBER NOT NULL,
    EVENT_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT MEETING_EVENT_FK FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID),
    CONSTRAINT MEETING_AUTHOR_FK FOREIGN KEY (AUTHOR_ID) REFERENCES MEMBERS(MEMBER_ID)
);

/

CREATE TABLE MEETING_HIS (
    LOG_ID NUMBER PRIMARY KEY,
    CHANGER VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(4000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/

CREATE TABLE EVENTS (
    EVENT_ID NUMBER PRIMARY KEY,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_DESCRIPTION VARCHAR2(2000) NOT NULL,
    DATE_START TIMESTAMP NOT NULL,
    DATE_END TIMESTAMP NOT NULL
);
 
/

CREATE TABLE DUTIES (
    DUTY_ID NUMBER PRIMARY KEY,
    DUTY_NAME VARCHAR2(100) NOT NULL,
    DUTY_DESCRIPTION VARCHAR2(500),
    EVENT_ID NUMBER NOT NULL,
    CONSTRAINT DUTIES_EVENT_FK FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID)
);

/

CREATE TABLE EVENT_DUTIES_HIS (
    LOG_ID NUMBER PRIMARY KEY,
    AUTHOR VARCHAR2(40) NOT NULL,
    LOG_MSSG VARCHAR2(2000) NOT NULL,
    TR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

/

CREATE TABLE KNOWLEDGE (
    KNOWLEDGE_ID NUMBER PRIMARY KEY,
    KNOWLEDGE_AUTHOR_ID NUMBER NOT NULL,
    KNOWLEDGE_NAME VARCHAR2(100) NOT NULL,
    CONSTRAINT KNOWLEDGE_AUTHOR_FK FOREIGN KEY (KNOWLEDGE_AUTHOR_ID) REFERENCES MEMBERS(MEMBER_ID)
);

/

CREATE TABLE KNOWLEDGE_MEDIA(
    KNOWLEDGE_ID NUMBER NOT NULL,
    MEDIA_ID NUMBER NOT NULL,
    PRIMARY KEY (KNOWLEDGE_ID, MEDIA_ID),
    CONSTRAINT KNOWLEDGE_MEDIA_KNOWLEDGE_FK FOREIGN KEY (KNOWLEDGE_ID) REFERENCES KNOWLEDGE(KNOWLEDGE_ID),
    CONSTRAINT KNOWLEDGE_MEDIA_MEDIA_FK FOREIGN KEY (MEDIA_ID) REFERENCES MEDIA(MEDIA_ID)
);

/

CREATE TABLE MEDIA(
    MEDIA_ID NUMBER PRIMARY KEY,
    MEDIA_NAME VARCHAR2(50) NOT NULL,
    MEDIA_VALUE BLOB,
    MEDIA_TYPE VARCHAR2(6) NOT NULL,
    AUTHOR_ID NUMBER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT MEDIA_AUTHOR_FK FOREIGN KEY (AUTHOR_ID) REFERENCES MEMBERS(MEMBER_ID)
);

/

CREATE TABLE POSTS (
    POST_ID NUMBER PRIMARY KEY,
    POST_NAME VARCHAR2(100) NOT NULL,
    POST_DESCRIPTION VARCHAR2(2000),
    POST_TYPE VARCHAR2(4) NOT NULL, -- ['NEWS', 'BLOG', 'KNOW']
);

/

-- Sequences
CREATE SEQUENCE REPORTS_SEQ
START WITH 1300
INCREMENT BY 1;

/

CREATE SEQUENCE MEMBERS_SEQ
START WITH 140
INCREMENT BY 1;

/

CREATE SEQUENCE ADDRES_SEQ
START WITH 10
INCREMENT BY 1;

/

CREATE SEQUENCE ORS_PATROL_SEQ
START WITH 166
INCREMENT BY 1;

/

CREATE SEQUENCE POSTS_SEQ
START WITH 1350
INCREMENT BY 1;

/

CREATE SEQUENCE KNOWLEDGE_MEDIA_SEQ
START WITH 1370
INCREMENT BY 1;

/

CREATE OR REPLACE DIRECTORY 'FILES_FOR_REPORT' AS '/home/hangbeni/Dokumentumok/db2_hrphee/temp';

/

-- PROCEDURES

CREATE OR REPLACE PROCEDURE CREATE_NEW_RANK(
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) IS
BEGIN
    INSERT INTO RANK_DICTIONARY(
        RANK_NAME
    ) VALUES (
        P_RANK_NAME
    );
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_RANK_BY_NAME(
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) IS
    V_RANK_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_RANK_COUNT
    FROM RANK_PRIVILEGES
    WHERE RANK_PRIVILEGES.RANK_ID = (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE RANK_NAME = P_RANK_NAME
        );
    CASE
        WHEN V_RANK_COUNT = 0 THEN
            DELETE FROM RANK_DICTIONARY
            WHERE
                RANK_NAME = P_RANK_NAME;
            COMMIT;
        WHEN V_RANK_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'This rank is in use');
    END CASE;
END DELETE_RANK_BY_NAME;
/

CREATE OR REPLACE PROCEDURE DELETE_RANK_BY_ID(
    P_RANK_ID RANK_DICTIONARY.RANK_ID%TYPE
) IS
    V_RANK_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_RANK_COUNT
    FROM RANK_PRIVILEGES
    WHERE RANK_PRIVILEGES.RANK_ID = P_RANK_ID;
    CASE
        WHEN V_RANK_COUNT = 0 THEN
            DELETE FROM RANK_DICTIONARY
            WHERE
                RANK_NAME = P_RANK_ID;
            COMMIT;
        WHEN V_RANK_COUNT > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'This rank is in use');
    END CASE;
END DELETE_RANK_BY_ID;
/

CREATE OR REPLACE PROCEDURE NEW_GATHERING_FROM_STRING(
    P_REPORT_STRING IN VARCHAR2,
    P_AUTHOR_ID IN GATHERING_REPORTS.AUTHOR_ID%TYPE,
    P_ORS_ID IN GATHERING_REPORTS.ORS_ID%TYPE
) IS
BEGIN
    IF HAVE_MEMBER_RANK_BY_NAME_FUNC(
        P_MEMBER_ID => P_AUTHOR_ID,
        P_RANK_NAME => 'GROUP_LEADER'
    ) = 1 THEN
        INSERT INTO GATHERING_REPORTS(
            REPORT_ID,
            REPORT_CONTENT,
            AUTHOR_ID,
            ORS_ID
        ) VALUES (
            REPORTS_SEQ.NEXTVAL,
            P_REPORT_STRING,
            P_AUTHOR_ID,
            P_ORS_ID
        );
        COMMIT;
    ELSE
        RAISE_APPLICATION_ERROR(-20002, 'You are not a group leader');
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE NEW_GATHER_REPORT_FROM_BFILE(
    P_FILE_NAME VARCHAR2
) IS
    V_CLOB   CLOB;
    V_BFILE  BFILE;
    V_LEADER MEMBERS.MEMBER_ID%TYPE;
BEGIN
    V_LEADER := GET_RANDOM_GROUP_LEADER_FUNC();
    V_BFILE := BFILENAME( 'FILES_FOR_REPORT', LOWER(P_FILE_NAME));
    DBMS_LOB.FILEOPEN(V_BFILE);
    DBMS_LOB.LOADFROMFILE( V_CLOB, V_BFILE, DBMS_LOB.GETLENGTH(V_BFILE));
    DBMS_LOB.FILECLOSE(V_BFILE);
    INSERT INTO GATHERING_REPORTS(
        REPORT_ID,
        REPORT_CONTENT,
        AUTHOR_ID,
        ORS_ID
    ) VALUES (
        REPORTS_SEQ.NEXTVAL,
        V_CLOB,
        V_LEADER,
        GET_RANDOM_ORS_FUNC()
    );
    COMMIT;
END;
/

-- FUNCTIONS

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_NAME_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_NAME RANK_DICTIONARY.RANK_NAME%TYPE
) RETURN BOOLEAN IS
    V_RESULT NUMBER;
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                1
            ELSE
                0
        END INTO V_RESULT
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND
        RANK_ID IN (
            SELECT RANK_ID
            FROM RANK_DICTIONARY
            WHERE RANK_NAME = P_RANK_NAME
        );
    RETURN V_RESULT = 1;
END HAVE_MEMBER_RANK_BY_NAME_FUNC;
/

CREATE OR REPLACE FUNCTION HAVE_MEMBER_RANK_BY_ID_FUNC(
    P_MEMBER_ID RANK_PRIVILEGES.MEMBER_ID%TYPE,
    P_RANK_ID RANK_PRIVILEGES.RANK_ID%TYPE
) RETURN BOOLEAN IS
    V_RESULT NUMBER;
BEGIN
    SELECT CASE
            WHEN COUNT(*) > 0 THEN
                1
            ELSE
                0
        END INTO V_RESULT
    FROM RANK_PRIVILEGES
    WHERE MEMBER_ID = P_MEMBER_ID AND
        RANK_ID = P_RANK_ID;
    RETURN V_RESULT = 1;
END HAVE_MEMBER_RANK_BY_ID_FUNC;
/

CREATE OR REPLACE FUNCTION GET_RANDOM_ORS_FUNC RETURN ORS.ORS_ID%TYPE IS
    V_RESULT ORS.ORS_ID%TYPE;
BEGIN
    SELECT ORS_ID INTO V_RESULT
    FROM ORS
    WHERE ROWNUM = 1
    ORDER BY DBMS_RANDOM.VALUE;
    RETURN V_RESULT;
END GET_RANDOM_ORS_FUNC;
/

CREATE OR REPLACE FUNCTION GET_RANDOM_GROUP_LEADER_FUNC RETURN MEMBERS%ROWTYPE IS
    V_RESULT MEMBERS%ROWTYPE;
BEGIN
    SELECT T2.* INTO V_RESULT
    FROM (
            SELECT T1.*
            FROM (
                    SELECT *
                    FROM MEMBERS
                    WHERE HAVE_MEMBER_RANK_BY_NAME_FUNC(
                            P_MEMBER_ID => MEMBERS.MEMBER_ID /*IN NUMBER*/,
                            P_RANK_NAME => 'GROUP_LEADER' /*IN VARCHAR2*/
                        ) = 1 AND
                        ROWNUM = 1
                ) T1
            ORDER BY DBMS_RANDOM.VALUE
        ) T2;
    RETURN V_RESULT;
END GET_RANDOM_GROUP_LEADER_FUNC;
/

-- TRIGGERS
CREATE OR REPLACE TRIGGER ADDRESS_REUSE_TRG INSTEAD OF
    INSERT OR UPDATE ON ADDRESS FOLLOWS ADDRESS_LOG
BEGIN
    MERGE INTO MEMBERS M USING (
        SELECT :NEW.MEMBER_ID,
            A.ADDRESS_ID
        FROM ADDRESS A
        WHERE A.ZIP_CODE = :NEW.ZIP_CODE AND
            A.COUNTRY = :NEW.COUNTRY AND
            A.CITY = :NEW.CITY AND
            A.STREET_NAME = :NEW.STREET_NAME AND
            A.STREET_TYPE = :NEW.STREET_TYPE AND
            A.HOUSE_NUMBER = :NEW.HOUSE_NUMBER AND
            ROWNUM = 1
    ) REUSABLE ON (M.MEMBER_ID = REUSABLE.MEMBER_ID) WHEN MATCHED THEN UPDATE SET M.ADDRESS_ID = REUSABLE.ADDRESS_ID WHEN NOT MATCHED THEN INSERT INTO ADDRESS( ADDRESS_ID, MEMBER_ID, ZIP_CODE, COUNTRY, CITY, STREET_NAME, STREET_TYPE, HOUSE_NUMBER ) VALUES ( ADDRES_SEQ.NEXTVAL, :NEW.MEMBER_ID, :NEW.ZIP_CODE, :NEW.COUNTRY, :NEW.CITY, :NEW.STREET_NAME, :NEW.STREET_TYPE, :NEW.HOUSE_NUMBER );
    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER ADDRESS_LOG AFTER
    INSERT OR UPDATE OR DELETE ON ADDRESS
DECLARE
    V_OPERATION VARCHAR2(20);
    V_OPERATOR  ADDRESS_HIS.CHANGER%TYPE;
BEGIN
    CASE
        WHEN INSERTING THEN
            V_OPERATION := 'INSERT';
        WHEN UPDATING THEN
            V_OPERATION := 'UPDATE';
        WHEN DELETING THEN
            V_OPERATION := 'DELETE';
    END CASE;

    IF SUCCESS THEN
        V_OPERATION := V_OPERATION
                       || '_SUCCESSFUL';
    ELSE
        V_OPERATION := V_OPERATION
                       || '_FAILED';
    END IF;

    SELECT SYS_CONTEXT('USERENV', 'SESSION_USER') INTO V_OPERATOR
    FROM DUAL;
    INSERT INTO ADDRESS_HIS (
        CHANGE_ID,
        CHANGER,
        LOG_MSSG,
        TR_TIME
    ) VALUES (
        ADDRESS_HIS_SEQ.NEXTVAL,
        V_OPERATOR,
        'Address '
        || V_OPERATION
        || ': '
        || :NEW.ZIP_CODE
        || ', '
        || :NEW.COUNTRY
        || ', '
        || :NEW.CITY
        || ', '
        || :NEW.STREET_NAME
        || ', '
        || :NEW.STREET_TYPE
        || ', '
        || :NEW.HOUSE_NUMBER,
        SYSTIMESTAMP
    );
END;
/

CREATE OR REPLACE TRIGGER MEMBER_PROMOTION_LOG AFTER
    INSERT OR UPDATE OR DELETE ON RANK_PRIVILEGES
DECLARE
    V_OPERATION VARCHAR2(100);
BEGIN
    CASE
        WHEN INSERTING THEN
            V_OPERATION := 'INSERT_NEW_PROMOTION';
        WHEN UPDATING THEN
            V_OPERATION := 'UPDATE_CHANGED_PROMOTION';
        WHEN DELETING THEN
            V_OPERATION := 'DELETE_DEPROMOTION';
    END CASE;

    IF SUCCESS THEN
        V_OPERATION := V_OPERATION
                       || '_SUCCESSFUL';
    ELSE
        V_OPERATION := V_OPERATION
                       || '_FAILED';
    END IF;

    INSERT INTO RANK_PRIVILEGES_HIS (
        CHANGER,
        LOG_MSSG,
        TR_TIME
    ) VALUES (
        SYS_CONTEXT('USERENV', 'SESSION_USER'),
        'Member '
        || V_OPERATION
        || ': '
        || :NEW.MEMBER_ID,
        SYSTIMESTAMP
    );
    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER RANK_INSERTION_LOG AFTER
    INSERT ON RANK_DICTIONARY
DECLARE
    V_OPERATION VARCHAR2(100);
BEGIN
    V_OPERATION := 'INSERT_NEW_RANK';
    INSERT INTO RANK_DICTIONARY_HIS (
        CHANGER,
        LOG_MSSG,
        TR_TIME
    ) VALUES (
        SYS_CONTEXT('USERENV', 'SESSION_USER'),
        'Rank '
        || V_OPERATION
        || ': '
        || :NEW.RANK_NAME,
        SYSTIMESTAMP
    );
    COMMIT;
END;
/

-- Initail data inserts