CREATE OR REPLACE TRIGGER EVENT_DUTIES_ASS_TRG BEFORE
    INSERT OR UPDATE ON EVENT_DUTIES_ASS FOR EACH ROW
BEGIN
    IF :NEW.ASSIGNMENT_END_DATE IS NOT NULL AND :NEW.ASSIGNMENT_END_DATE >= SYSDATE THEN
        RAISE EXCEPTIONS_PKG.ASSIGMENT_DATE_EXC;
    END IF;
EXCEPTION
    WHEN EXCEPTIONS_PKG.ASSIGMENT_DATE_EXC THEN
        DBMS_OUTPUT.PUT_LINE ( 'The assignment date is not in the future!' );
END;
/

CREATE OR REPLACE TRIGGER EVENT_DUTIES_ASS_LOG_TRG BEFORE
    INSERT OR UPDATE OR DELETE ON EVENT_DUTIES_ASS FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    V_OPERATION PUBLIC_ACTIVITIES_HISTORY.TR_NAME%TYPE;
    V_MESSAGE   PUBLIC_ACTIVITIES_HISTORY.LOG_MSSG%TYPE;
BEGIN
    CASE
        WHEN INSERTING THEN
            V_OPERATION := 'SUCCESSFUL_INSERT';
            V_MESSAGE := 'EVENT_DUTIES_ASSOSIATIVE ' || V_OPERATION || ': ' || :NEW.EVENT_ID || ', ' || :NEW.DUTY_ID || ', ' || :NEW.MEMBER_ID || ', ' || :NEW.ASSIGNMENT_END_DATE;
        WHEN UPDATING THEN
            V_OPERATION := 'SUCCESSFUL_UPDATE';
            V_MESSAGE := 'EVENT_DUTIES_ASSOSIATIVE ' || V_OPERATION || 'NEW: ' || :NEW.EVENT_ID || ', ' || :NEW.DUTY_ID || ', ' || :NEW.MEMBER_ID || ', ' || :NEW.ASSIGNMENT_END_DATE;
            V_MESSAGE := V_MESSAGE ||CHR ( 10 ) || 'OLD: ' || :OLD.EVENT_ID || ', ' || :OLD.DUTY_ID || ', ' || :OLD.MEMBER_ID || ', ' || :OLD.ASSIGNMENT_END_DATE;
        WHEN DELETING THEN
            V_OPERATION := 'SUCCESSFUL_DELETE';
            V_MESSAGE := 'EVENT_DUTIES_ASSOSIATIVE ' || V_OPERATION || ': ' || :OLD.EVENT_ID || ', ' || :OLD.DUTY_ID || ', ' || :OLD.MEMBER_ID || ', ' || :OLD.ASSIGNMENT_END_DATE;
    END CASE;

    INSERT INTO PUBLIC_ACTIVITIES_HISTORY (
        CHANGER,
        LOG_MSSG,
        MODIFIED_TABLE,
        TR_NAME
    ) VALUES (
        USER,
        V_MESSAGE,
        'ADDRESS',
        V_OPERATION
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        CASE
            WHEN INSERTING THEN
                V_OPERATION := 'FAIL_INSERT';
            WHEN UPDATING THEN
                V_OPERATION := 'FAIL_UPDATE';
            WHEN DELETING THEN
                V_OPERATION := 'FAIL_DELETE';
        END CASE;

        INSERT INTO PUBLIC_ACTIVITIES_HISTORY (
            CHANGER,
            LOG_MSSG,
            MODIFIED_TABLE,
            TR_NAME
        ) VALUES (
            USER,
            V_MESSAGE,
            'ADDRESS',
            V_OPERATION
        );
        COMMIT;
END EVENT_DUTIES_ASS_LOG_TRG;