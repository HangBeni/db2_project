CREATE OR REPLACE PACKAGE GATHERING_PKG IS

    PROCEDURE NEW_GATHERING_FROM_STRING (
        P_REPORT_STRING IN VARCHAR2,
        P_AUTHOR_ID IN GATHERING_REPORTS.AUTHOR_ID%TYPE,
        P_ORS_ID IN GATHERING_REPORTS.ORS_ID%TYPE
    );

    PROCEDURE NEW_GATHER_REPORT_FROM_BFILE (
        P_FILE_NAME VARCHAR2
    );

    PROCEDURE UPDATE_REPORT_CONTENT (
        P_REPORT_ID IN GATHERING_REPORTS.REPORT_ID%TYPE,
        P_CONTENT IN GATHERING_REPORTS.REPORT_CONTENT%TYPE
    );

    FUNCTION GET_REPORT_BY_ID (
        P_REPORT_ID IN GATHERING_REPORTS.REPORT_ID%TYPE
    ) RETURN R_GATHERING_REPORT_TY;

    FUNCTION GET_ALL_REPORTS RETURN T_GATHERING_REPORT_TY;

    FUNCTION GET_AUTHOR_REPORTS_FN (
        P_AUTHOR_ID GATHERING_REPORTS.AUTHOR_ID%TYPE
    ) RETURN T_GATHERING_REPORT_TY;

    FUNCTION GET_AUTHOR_LATEST_REPORT (
        P_AUTHOR_ID GATHERING_REPORTS.AUTHOR_ID%TYPE
    ) RETURN R_GATHERING_REPORT_TY;

    FUNCTION GET_ORS_REPORTS (
        P_ORS_ID GATHERING_REPORTS.ORS_ID%TYPE
    ) RETURN T_GATHERING_REPORT_TY;

    FUNCTION GET_ORS_REPORTS (
        P_ORS_NAME ORS.ORS_NAME%TYPE
    ) RETURN T_GATHERING_REPORT_TY;
END GATHERING_PKG;
/

CREATE OR REPLACE PACKAGE BODY GATHERING_PKG IS

    PROCEDURE NEW_GATHERING_FROM_STRING (
        P_REPORT_STRING IN VARCHAR2,
        P_AUTHOR_ID IN GATHERING_REPORTS.AUTHOR_ID%TYPE,
        P_ORS_ID IN GATHERING_REPORTS.ORS_ID%TYPE
    ) IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        IF HAVE_MEMBER_RANK_BY_NAME_FUNC (
            P_MEMBER_ID => P_AUTHOR_ID,
            P_RANK_NAME => 'GROUP_LEADER'
        ) = 1 THEN
            INSERT INTO GATHERING_REPORTS (
                REPORT_CONTENT,
                AUTHOR_ID,
                ORS_ID
            ) VALUES (
                P_REPORT_STRING,
                P_AUTHOR_ID,
                P_ORS_ID
            );
            COMMIT;
        ELSE
            ROLLBACK;
            RAISE EXCEPTIONS_PKG.INVALID_PRIVILEGE_EXC;
        END IF;
    EXCEPTION
        WHEN EXCEPTIONS_PKG.INVALID_PRIVILEGE_EXC THEN
            INSERT INTO REPORT_HISTORY (
                CHANGER,
                LOG_MSSG,
                MODIFIED_TABLE,
                TR_NAME
            ) VALUES (
                USER,
                'User ' || USER || P_AUTHOR_ID ||' tried to insert a gathering report without the required privilege.',
                'GATHERING_REPORTS',
                'INSERT'
            );
            COMMIT;
    END;

    PROCEDURE NEW_GATHER_REPORT_FROM_BFILE (
        P_FILE_NAME VARCHAR2
    ) IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        V_CLOB      CLOB;
        V_BFILE     BFILE;
        V_LEADER_ID MEMBERS.MEMBER_ID%TYPE;
    BEGIN
        V_LEADER_ID := MEMBER_PKG.GET_RANDOM_GROUP_LEADER_FUNC ( );
        V_BFILE := BFILENAME ( 'FILES_FOR_REPORT', LOWER ( P_FILE_NAME ) );
        DBMS_LOB.FILEOPEN ( V_BFILE );
        DBMS_LOB.LOADFROMFILE ( V_CLOB, V_BFILE, DBMS_LOB.GETLENGTH ( V_BFILE ) );
        DBMS_LOB.FILECLOSE ( V_BFILE );
        IF HAVE_MEMBER_RANK_BY_NAME_FUNC (
            P_MEMBER_ID => V_LEADER_ID,
            P_RANK_NAME => 'GROUP_LEADER'
        ) = 1 THEN
            INSERT INTO GATHERING_REPORTS (
                REPORT_CONTENT,
                AUTHOR_ID,
                ORS_ID
            ) VALUES (
                V_CLOB,
                V_LEADER_ID,
                ORS_PKG.GET_RANDOM_ORS_FUNC ( )
            );
            COMMIT;
        ELSE
            ROLLBACK;
            RAISE EXCEPTIONS_PKG.INVALID_PRIVILEGE_EXC;
        END IF;
    EXCEPTION
        WHEN EXCEPTIONS_PKG.INVALID_PRIVILEGE_EXC THEN
            INSERT INTO REPORT_HISTORY (
                CHANGER,
                LOG_MSSG,
                MODIFIED_TABLE,
                TR_NAME
            ) VALUES (
                USER,
                'User ' || USER || V_LEADER_ID ||' tried to insert a gathering report without the required privilege.',
                'GATHERING_REPORTS',
                'INSERT'
            );
            COMMIT;
    END;

    PROCEDURE UPDATE_REPORT_CONTENT (
        P_REPORT_ID IN GATHERING_REPORTS.REPORT_ID%TYPE,
        P_CONTENT IN GATHERING_REPORTS.REPORT_CONTENT%TYPE
    ) AS
        PRAGMA AUTONOMOUS_TRANSACTION;
        V_OLD_CONTENT GATHERING_REPORTS.REPORT_CONTENT%TYPE;
    BEGIN
        SELECT REPORT_CONTENT INTO V_OLD_CONTENT
        FROM GATHERING_REPORTS
        WHERE P_REPORT_ID = REPORT_ID;
        IF V_OLD_CONTENT = P_CONTENT THEN
            DBMS_OUTPUT.PUT_LINE ( 'The input content is identical with the old content' );
        ELSE
            UPDATE GATHERING_REPORTS
            SET
                REPORT_CONTENT = P_CONTENT
            WHERE
                REPORT_ID = P_REPORT_ID;
            COMMIT;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found with -'|| P_REPORT_ID ||'ID' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END;

    FUNCTION GET_REPORT_BY_ID (
        P_REPORT_ID GATHERING_REPORTS.REPORT_ID%TYPE
    ) RETURN R_GATHERING_REPORT_TY AS
        V_REPORT R_GATHERING_REPORT_TY;
    BEGIN
        SELECT R_GATHERING_REPORT_TY ( REPORT_ID, REPORT_CONTENT, AUTHOR_ID, ORS_ID, CREATED_AT ) INTO V_REPORT
        FROM GATHERING_REPORTS
        WHERE REPORT_ID = P_REPORT_ID;
        RETURN V_REPORT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found with -'|| P_REPORT_ID ||'ID' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END GET_REPORT_BY_ID;

    FUNCTION GET_ALL_REPORTS RETURN T_GATHERING_REPORT_TY AS
        V_REPORT T_GATHERING_REPORT_TY;
    BEGIN
        SELECT R_GATHERING_REPORT_TY ( REPORT_ID, REPORT_CONTENT, AUTHOR_ID, ORS_ID, CREATED_AT ) BULK COLLECT INTO V_REPORT
        FROM GATHERING_REPORTS;
        RETURN V_REPORT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END GET_ALL_REPORTS;

    FUNCTION GET_AUTHOR_REPORTS_FN (
        P_AUTHOR_ID GATHERING_REPORTS.AUTHOR_ID%TYPE
    ) RETURN T_GATHERING_REPORT_TY AS
        V_REPORT T_GATHERING_REPORT_TY;
    BEGIN
        SELECT R_GATHERING_REPORT_TY ( REPORT_ID, REPORT_CONTENT, AUTHOR_ID, ORS_ID, CREATED_AT ) BULK COLLECT INTO V_REPORT
        FROM GATHERING_REPORTS;
        RETURN V_REPORT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END GET_AUTHOR_REPORTS_FN;

    FUNCTION GET_AUTHOR_LATEST_REPORT (
        P_AUTHOR_ID GATHERING_REPORTS.AUTHOR_ID%TYPE
    ) RETURN R_GATHERING_REPORT_TY AS
        V_REPORT R_GATHERING_REPORT_TY;
    BEGIN
        SELECT R_GATHERING_REPORT_TY ( REPORT_ID, REPORT_CONTENT, AUTHOR_ID, ORS_ID, CREATED_AT ) INTO V_REPORT
        FROM GATHERING_REPORTS
        WHERE AUTHOR_ID = P_AUTHOR_ID AND
            ROWNUM=1
        ORDER BY CREATED_AT DESC;
        RETURN V_REPORT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found with -'|| P_AUTHOR_ID ||'AUTHOR_ID' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END GET_AUTHOR_LATEST_REPORT;

    FUNCTION GET_ORS_REPORTS (
        P_ORS_ID GATHERING_REPORTS.ORS_ID%TYPE
    ) RETURN T_GATHERING_REPORT_TY AS
        V_REPORT T_GATHERING_REPORT_TY;
    BEGIN
        SELECT R_GATHERING_REPORT_TY ( REPORT_ID, REPORT_CONTENT, AUTHOR_ID, ORS_ID, CREATED_AT ) BULK COLLECT INTO V_REPORT
        FROM GATHERING_REPORTS
        WHERE ORS_ID = P_ORS_ID;
        RETURN V_REPORT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found with ' ||P_ORS_ID|| ' ORS_ID' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END GET_ORS_REPORTS;

    FUNCTION GET_ORS_REPORTS (
        P_ORS_NAME ORS.ORS_NAME%TYPE
    ) RETURN T_GATHERING_REPORT_TY AS
        V_REPORT T_GATHERING_REPORT_TY;
    BEGIN
        SELECT R_GATHERING_REPORT_TY ( REPORT_ID, REPORT_CONTENT, AUTHOR_ID, ORS_ID, CREATED_AT ) BULK COLLECT INTO V_REPORT
        FROM GATHERING_REPORTS
        WHERE ORS_ID IN (
                SELECT ORS_ID
                FROM ORS
                WHERE ORS_NAME = P_ORS_NAME
            );
        RETURN V_REPORT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE ( 'No report found about ' ||P_ORS_NAME|| ' ORS' );
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'CODE- '|| SQLCODE || 'MESSAGE- ' || SQLERRM );
    END GET_ORS_REPORTS;
END GATHERING_PKG;
/