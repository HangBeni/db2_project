CREATE OR REPLACE PACKAGE USER_FACTORY_PKG IS

    PROCEDURE CREATE_GROUP_LEADER_PR (
        P_MEMBER IN MEMBER_TY
    );
END USER_FACTORY_PKG;
/

CREATE OR REPLACE PACKAGE BODY USER_FACTORY_PKG IS

    PROCEDURE CREATE_LEADER_USER (
        P_LAST_NAME IN VARCHAR2,
        P_PASSWORD IN VARCHAR2
    ) AS
    BEGIN
        EXECUTE IMMEDIATE 'CREATE USER ' || P_LAST_NAME || '_LEADER IDENTIFIED BY ' || P_PASSWORD || ' DEFAULT TABLESPACE USER QUOTA UNLIMITED ON USER';
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO ' || P_LAST_NAME || '_LEADER';
        EXECUTE IMMEDIATE 'GRANT SELECT ON ORS, EVENTS, EVENT_DUTIES_ASS, DUTIES, KNOWLEDGE, KNOWLEDGE_MEDIA_ASS, MEDIA TO ' || P_LAST_NAME || '_LEADER';
        EXECUTE IMMEDIATE 'GRANT UPDATE ON MEMBERS TO ' || P_LAST_NAME || '_LEADER';
        DBMS_OUTPUT.PUT_LINE ( 'USER CREATED' || P_LAST_NAME || '_LEADER' );
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE ( 'ERROR OCCURD AT USER CREATION' || SQLCODE || ' - ' || SQLERRM );
    END CREATE_LEADER_USER;

    PROCEDURE CREATE_GROUP_LEADER_PR (
        P_MEMBER IN MEMBER_TY
    ) AS
        PRAGMA AUTONOMOUS_TRANSACTION;
        V_LEADER_ID        NUMBER;
        V_LEADER_LAST_NAME MEMBERS.LAST_NAME%TYPE;
        V_GL_ID            RANK_DICTIONARY.RANK_ID%TYPE;
        V_ERRM             VARCHAR2 ( 200 );
        V_CODE             VARCHAR2 ( 200 );
    BEGIN
        MEMBER_PKG.CREATE_MEMBER_FOR_USER (
            P_MEMBER => P_MEMBER /*IN MEMBER_TY*/,
            OUT_MEMBER_ID => V_LEADER_ID /*OUT NUMBER*/
        );
        SELECT RANK_ID INTO V_GL_ID
        FROM RANK_DICTIONARY
        WHERE RANK_NAME = CONSTANTS_PKG.RANKS_NAMES ( 'GL' );
        IF V_GL_ID IS NULL THEN
            RAISE_APPLICATION_ERROR ( -20022, 'There is no a GROUP_LEADER rank in RANK_DICTIONARY!' );
        END IF;

        RANK_PRIVILEGES_PGK.PROMOTE_MEMBER (
            P_MEMBER_ID => V_LEADER_ID /*IN NUMBER*/,
            P_RANK_ID => V_GL_ID /*IN NUMBER*/
        );
        SELECT LAST_NAME INTO V_LEADER_LAST_NAME
        FROM MEMBERS
        WHERE MEMBER_ID = V_LEADER_ID;
        IF RANK_DIC_PKG.HAVE_MEMBER_RANK_BY_NAME_FUNC (
            P_MEMBER_ID => V_LEADER_ID /*IN NUMBER*/,
            P_RANK_NAME => CONSTANTS_PKG.RANKS_NAMES ( 'GL' ) /*IN VARCHAR2*/
        ) = 1 THEN
            CREATE_LEADER_USER ( V_LEADER_LAST_NAME, '123' );
        END IF;
    EXCEPTION
        WHEN EXCEPTIONS_PKG.INVALID_PRIVILEGE_EXC THEN
            DBMS_OUTPUT.PUT_LINE ( 'ERROR- Insufficient priveleges/rank to create user' );
            V_ERRM := SQLERRM;
            V_CODE := SQLCODE;
            INSERT INTO PERSONAL_HISTORY (
                CHANGER,
                LOG_MSSG,
                MODIFIED_TABLE,
                TR_NAME
            ) VALUES (
                USER,
                'FAILED USER CREATION AT- '|| SYSTIMESTAMP || ' -' || V_CODE|| ' - ' ||V_ERRM,
                'MEMBERS',
                'CREATE USER'
            );
            COMMIT;
        WHEN OTHERS THEN
            V_ERRM := SQLERRM;
            V_CODE := SQLCODE;
            INSERT INTO PERSONAL_HISTORY (
                CHANGER,
                LOG_MSSG,
                MODIFIED_TABLE,
                TR_NAME
            ) VALUES (
                USER,
                'FAILED USER CREATION AT- '|| SYSTIMESTAMP || ' -' ||V_CODE || ' - ' ||V_ERRM,
                'MEMBERS',
                'CREATE USER'
            );
            COMMIT;
    END CREATE_GROUP_LEADER_PR;
END USER_FACTORY_PKG;